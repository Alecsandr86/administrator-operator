/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$fancy-clock-name: 'fancy-clock';
$fancy-clock-x: 0px;
$fancy-clock-y: 0px;
$fancy-clock-offset-x: 0px;
$fancy-clock-offset-y: 0px;
$fancy-clock-width: 17px;
$fancy-clock-height: 17px;
$fancy-clock-total-width: 17px;
$fancy-clock-total-height: 128px;
$fancy-clock-image: '../images/sprite.png';
$fancy-clock: (0px, 0px, 0px, 0px, 17px, 17px, 17px, 128px, '../images/sprite.png', 'fancy-clock', );
$icon-btn-up-name: 'icon-btn-up';
$icon-btn-up-x: 0px;
$icon-btn-up-y: 22px;
$icon-btn-up-offset-x: 0px;
$icon-btn-up-offset-y: -22px;
$icon-btn-up-width: 10px;
$icon-btn-up-height: 5px;
$icon-btn-up-total-width: 17px;
$icon-btn-up-total-height: 128px;
$icon-btn-up-image: '../images/sprite.png';
$icon-btn-up: (0px, 22px, 0px, -22px, 10px, 5px, 17px, 128px, '../images/sprite.png', 'icon-btn-up', );
$icon-entrance-name: 'icon-entrance';
$icon-entrance-x: 0px;
$icon-entrance-y: 32px;
$icon-entrance-offset-x: 0px;
$icon-entrance-offset-y: -32px;
$icon-entrance-width: 17px;
$icon-entrance-height: 16px;
$icon-entrance-total-width: 17px;
$icon-entrance-total-height: 128px;
$icon-entrance-image: '../images/sprite.png';
$icon-entrance: (0px, 32px, 0px, -32px, 17px, 16px, 17px, 128px, '../images/sprite.png', 'icon-entrance', );
$icon-print-name: 'icon-print';
$icon-print-x: 0px;
$icon-print-y: 53px;
$icon-print-offset-x: 0px;
$icon-print-offset-y: -53px;
$icon-print-width: 16px;
$icon-print-height: 16px;
$icon-print-total-width: 17px;
$icon-print-total-height: 128px;
$icon-print-image: '../images/sprite.png';
$icon-print: (0px, 53px, 0px, -53px, 16px, 16px, 17px, 128px, '../images/sprite.png', 'icon-print', );
$icon-reset-name: 'icon-reset';
$icon-reset-x: 0px;
$icon-reset-y: 74px;
$icon-reset-offset-x: 0px;
$icon-reset-offset-y: -74px;
$icon-reset-width: 12px;
$icon-reset-height: 12px;
$icon-reset-total-width: 17px;
$icon-reset-total-height: 128px;
$icon-reset-image: '../images/sprite.png';
$icon-reset: (0px, 74px, 0px, -74px, 12px, 12px, 17px, 128px, '../images/sprite.png', 'icon-reset', );
$icon-tim-name: 'icon-tim';
$icon-tim-x: 0px;
$icon-tim-y: 91px;
$icon-tim-offset-x: 0px;
$icon-tim-offset-y: -91px;
$icon-tim-width: 14px;
$icon-tim-height: 16px;
$icon-tim-total-width: 17px;
$icon-tim-total-height: 128px;
$icon-tim-image: '../images/sprite.png';
$icon-tim: (0px, 91px, 0px, -91px, 14px, 16px, 17px, 128px, '../images/sprite.png', 'icon-tim', );
$icon-user-min-name: 'icon-user_min';
$icon-user-min-x: 0px;
$icon-user-min-y: 112px;
$icon-user-min-offset-x: 0px;
$icon-user-min-offset-y: -112px;
$icon-user-min-width: 16px;
$icon-user-min-height: 16px;
$icon-user-min-total-width: 17px;
$icon-user-min-total-height: 128px;
$icon-user-min-image: '../images/sprite.png';
$icon-user-min: (0px, 112px, 0px, -112px, 16px, 16px, 17px, 128px, '../images/sprite.png', 'icon-user_min', );
$spritesheet-width: 17px;
$spritesheet-height: 128px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($fancy-clock, $icon-btn-up, $icon-entrance, $icon-print, $icon-reset, $icon-tim, $icon-user-min, );
$spritesheet: (17px, 128px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
